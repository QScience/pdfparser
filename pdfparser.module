<?php

/**
 *
 * @file
 * This module is for uploading a pdf journal then a remote server parses its
 * content. PDF's could be uploaded locally or it is allowed to give an url
 * which links to a pdf.
 *
 */


function pdfparser_menu() {
  $items = array();

  $items['admin/pdfparser'] = array(
    'title' => 'PDF Parser',
    'description' => 'Parser an uploaded pdf',
    'page callback' => 'pdfparser_upload_pdf',
    'access arguments' => array(TRUE),
  );

  $items['admin/pdfparser/upload'] = array(
    'title' => 'Upload',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

function pdfparser_upload_pdf() {
  $form = drupal_get_form('pdfparser_upload_pdf_form');
  return drupal_render($form);
}

function pdfparser_upload_pdf_form() {

  $url = 'http://devoidmind.com/_dd/drupal/rest_server/';
  $data = new stdClass();
  $data->a = 7;
  $data->b = 2;
  $function = 'multiply';
  $callback = 'req_return';

  post_json($url, $data, $function, $callback);

  //drupal_add_js(drupal_get_path('module', 'pdfparser') . '/js/pdfparser.js');

  $form['pdf'] = array(
    '#type' => 'file',
    '#title' => 'Upload PDF from computer',
  );

  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => 'Upload from URL'
  );

  $form['#attributes'] = array(
    'enctype' => 'multipart/form-data',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload pdf'),
  );

  return $form;
}

function pdfparser_upload_pdf_form_validate($form_id, &$form_values) {
  $name = '';
  $url = '';
  $name_ok = FALSE;
  $url_ok = FALSE;

  if (isset($_FILES['files']['name']['pdf'])) {
    $name = drupal_strtolower($_FILES['files']['name']['pdf']);
  }
  if (!empty($form_values['input']['url'])) {
    $url = drupal_strtolower($form_values['input']['url']);
  }

  if (!_ends_with($name, '.pdf')) {
    $name = FALSE;
  }
  else {
    $name_ok = TRUE;
  }
  if (!_ends_with($url, '.pdf')) {
    $url = FALSE;
  }
  else {
    $url_ok = TRUE;
  }

  if ($name_ok === FALSE && $url_ok === FALSE) {
    form_set_error('pdf', t('Please upload a valid pdf file or paste an url which links to a pdf.'));
  }
  elseif ($name_ok === FALSE && $url_ok !== FALSE) {
    if (!_is_valid_url($url)) {
      form_set_error('url', t('Invalid url format.'));
    }
  }
}

function pdfparser_upload_pdf_form_submit($form_id, &$form_values) {
  $path = getcwd() . '/' . variable_get('pdf_path');

  $name = $_FILES['files']['tmp_name']['pdf'];
  $tmp_name = $_FILES['files']['name']['pdf'];
  $url = $form_values['input']['url'];
  $upload = FALSE;
  $download = FALSE;
  $download_error = FALSE;
  $error = FALSE;

  if (_ends_with(drupal_strtolower($tmp_name), '.pdf')) {
    $upload = TRUE;
  }
  elseif (_ends_with(drupal_strtolower($url), '.pdf')) {
    $download = TRUE;
  }

  do {
    $new_f_name = _generate_code(24) . '.pdf';
  } while (is_file($path . '/' . $new_f_name));

  if ($upload || $download) {
    if ($upload) {
      if (is_dir($path)) {
        move_uploaded_file($_FILES['files']['tmp_name']['pdf'], $path . '/' . $new_f_name);
      }
      else {
        drupal_set_message(t('The path %path must exist to save pdf files to.', array('%path' => $path)), 'error');
      }
    }
    else {
      $pdf = @file_get_contents($url);
      if ($pdf === FALSE) {
        $download_error = $error = TRUE;
      }
      else {
        $file = fopen($path . '/' . $new_f_name, 'w');
        fwrite($file, $pdf);
        fclose($file);
      }
    }
    if ($error) {
      if ($download_error) {
        drupal_set_message(t('Unable to download file from url %url, please try again.', array('%url' => $url)), 'error');
      }
      else {
        drupal_set_message(t('Unknown error.'), 'error');
      }
    }
    else {
      $ret = test_post3('http://devoidmind.com/_dd/drupal/',
        array(),
        array('pdf' => array('name' => $new_f_name, 'path' => $path . '/' . $new_f_name))
      );
      dvm($ret);
      if ($upload) {
        drupal_set_message(t('PDF uploaded successfully.'));
      }
      else {
        drupal_set_message(t('PDF downloaded and stored successfully.'));
      }
    }
  }
  else {
    //TODO: throw error
    dvm('error');
  }
}


function post_json($url, $data, $function, $callback) {
  $json = new stdClass();
  $json->data = $data;
  $json->function = $function;
  $params = array(
    'http' => array(
      'method' => 'POST',
      'header' => 'Content-Type: application/json;',
      'content' => json_encode($json),
    )
  );
  $ctx = stream_context_create($params);
  $fp = fopen($url, 'rb', FALSE, $ctx);
  if (!$fp) {
    throw new Exception("Problem with $url, $php_errormsg");
  }
  $response = @stream_get_contents($fp);
  if ($response === FALSE) {
    throw new Exception("Problem reading data from $url, $php_errormsg");
  }
  $callback(json_decode($response));
}

function req_return($data) {
  dvm($data);
}

////////////////////////////////////////////////////

function _ends_with($haystack, $needle) {
  $length = drupal_strlen($needle);
  if ($length == 0) {
    return TRUE;
  }
  $start  = $length * -1; //negative
  return (drupal_substr($haystack, $start) === $needle);
}

function _generate_code($length) {
  $code = "";
  $possible = "0123456789abcdefghijklmnopqrstuvwxyz";
  for ($i = 0; $i < $length; $i++) {
    $code .= drupal_substr($possible, mt_rand(0, drupal_strlen($possible) - 1), 1);
  }
  return $code;
}

function _is_valid_url($url) {
  return preg_match('|^http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i', $url);
}


