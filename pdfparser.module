<?php

/**
 *
 * @file
 * This module is for uploading a pdf journal then a remote server parses its
 * content. PDF's could be uploaded locally or it is allowed to give an url
 * which links to a pdf.
 *
 */


function pdfparser_paper_uploaded($file) {
  send_pdf_to_server($file->destination);
}

function pdfparser_menu() {
  $items = array();

  $items['admin/pdfparser'] = array(
    'title' => 'PDF Parser',
    'description' => 'PDF parser',
    'page callback' => 'pdfparser_settings',
    'access arguments' => array(TRUE),
  );

  $items['admin/pdfparser/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -9,
  );

  $items['admin/pdfparser/list'] = array(
    'title' => 'List parsed PDFs',
    'description' => 'List of parsed datas',
    'page callback' => 'pdfparser_parsedlist',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array(TRUE),
    'weight' => -8,
  );
  
  return $items;
}

function pdfparser_parsedlist() {
  $parsed = variable_get('pdfparser_parsed_pdf_path');

  $scan = file_scan_directory($parsed, '/.*/' );
  $files = array();
  foreach ($scan as $key => $val) {
    $files[] = $val->filename;
  }
  $variables = array();
  $variables['items'] = $files;
  $variables['title'] = 'Parsed pdf files';
  $variables['type'] = 'ul';
  $variables['attributes'] = array();

  return theme_item_list($variables);
}

function pdfparser_settings() {
  $form = drupal_get_form('pdfparser_settings_form');
  return drupal_render($form);
}

function pdfparser_form_paper_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module', 'pdfparser') . '/js/pdfparser.js', 'file');
  
  $lang = $form['field_paper_upload']['#language'];
  $desc = $form['field_paper_upload'][$lang][0]['#description'];
  $desc = explode("<br />", $desc);
  $desc[0] = $desc[0] . ' ' . t('After uploading, the document will be parsed which will try to fill out your fields, so please hold on for a while. This should take only a few seconds.');
  $form['field_paper_upload'][$lang][0]['#description'] = implode("<br />", $desc);
}

//function pdfparser_upload_pdf() {
//  $form = drupal_get_form('pdfparser_upload_pdf_form');
//  return drupal_render($form);
//}

function pdfparser_settings_form() {

  $form['server_url'] = array(
    '#type' => 'textfield',
    '#title' => 'The server URL',
    '#value' => variable_get('pdfparser_server_url'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send my public key to server'),
  );
  return $form;
}

function pdfparser_settings_form_validate($form_id, &$form_values) {
  $url = $form_values['input']['server_url'];
  $file_headers = @get_headers($url);
  if($file_headers === FALSE || $file_headers[0] == 'HTTP/1.1 404 Not Found') {
    form_set_error('server_url', t('Invalid url, please check again.'));
  }
}

function pdfparser_settings_form_submit($form_id, &$form_values) {
  $url = $form_values['input']['server_url'];
  variable_set('pdfparser_server_url', $url);
  $post = new stdClass();
  $post->func = 'set_public_key';
  $file = variable_get('pdfparser_public_key_path') . 'public_key';

  $ret_pure = do_post_request($url, json_encode($post), basename($file), $file);
  $ret = json_decode($ret_pure);
  if (isset($ret->result)) {
    if ($ret->result === 0) {
      drupal_set_message(t('Public key saved succesfully.'));
    }
    elseif ($ret->result === 1) {
      drupal_set_message(t('Cannot save public key at server side. Maybe there is no permission to do that.'), 'error');
      dvm($ret_pure);
    }
    else {
      drupal_set_message(t('Invalid server address.'), 'error');
    }
  }
  else {
    drupal_set_message(t('Unrecognized message from server. Please check again your server\'s URL.'), 'error');
    dvm($ret_pure);
  }
}

function send_pdf_to_server($file) {
  $module_path = drupal_get_path('module', 'pdfparser');

  $signature = '';

  $content = file_get_contents($file);
  $content_length = filesize($file);
  $crypted_hash = NULL;
  //$priv_handler = fopen($module_path . '/id_rsa', 'r');
  //$priv_key = fread($priv_handler, 8096);
  //$ssh_path = 'file://' . $module_path . '/drupal_key.pem';
  //dvm($ssh_path);
  //$pkeyid = openssl_pkey_get_private($ssh_path, 'asdasd');
  //dvm($pkeyid);
  $private_key = variable_get('pdfparser_private_key');
  $pub_key = file_get_contents(variable_get('pdfparser_public_key_path') . 'public_key');
  $sign = openssl_sign($content, $crypted_hash, $private_key);
  if ($sign) {
    $signature = base64_encode($crypted_hash);
  }
  else {
    dvm('Signaturing failed');
  }
  $post = array(
    'signature' => $signature,
  );

  $url = variable_get('pdfparser_server_url');
  $start = microtime(TRUE);
  $ret_pure = do_post_request($url, json_encode($post), basename($file), $file);
  $total_process_time = microtime(TRUE) - $start;
  $ret = json_decode($ret_pure);
  if (isset($ret->result)) {
    if ($ret->result === 0) {
      drupal_set_message(t('PDF parsed successfully at remote server.'));
      pdfparser_store_xml($ret->xml_name, base64_decode($ret->xml_citations), base64_decode($ret->xml_header), $content_length);
      //drupal_set_message(t('Time of parsing: :time seconds', array(':time' => number_format($ret->ellapse, 2, ',', ''))));
      //drupal_set_message(t('Time of total process :time seconds', array(':time' => number_format($total_process_time, 2, ',', ''))));
    }
    elseif ($ret->result === 1) {
      drupal_set_message(t('Incorrect public key. Please upload your public key again from PDFparser settings menu.'), 'error');
    }
    elseif ($ret->result === 2) {
      drupal_set_message(t('Error on uploading.'), 'error');
    }
    elseif ($ret->result === 3) {
      drupal_set_message(t('There is no public key uploaded from your server yet. Please upload it from PDF Parser menu.'), 'error');
    }
    else {
      drupal_set_message(t('Unkown error. Please upload your public key again from settings menu2.'), 'error');
    }
  }
  else {
    drupal_set_message(t('Unrecognized message from server. Please check again your server\'s URL.'), 'error');
    dvm($ret_pure);
  }
}

function pdfparser_store_xml($xml_name, $xml_citations, $xml_header, $pdf_filesize) {
  _save_file($xml_name, $xml_citations, 'citations');
  _save_file($xml_name, $xml_citations, 'header');
  //pdfparser_push_to_db($xml_name, $xml_content);

  $tags_to_collect = array('title', 'author', 'abstract');
  $obj = new stdClass();
  $obj->title = FALSE;
  $obj->authors = array();
  $obj->citations = array();
  $obj->abstract = FALSE;
  $citation_num = -1;
  pdfparser_xml_to_array(new SimpleXMLElement($xml_citations), $obj, $tags_to_collect, 0, FALSE, $citation_num);
  pdfparser_xml_to_array(new SimpleXMLElement($xml_header), $obj, $tags_to_collect, 0, FALSE, $citation_num);
  
  $db_res = pdfparser_push_to_db($obj, $xml_name, $pdf_filesize);

  $new_authrs_txt = '';
  $existing_authrs_txt = '';
  if (count($db_res->new_authors) !== 0) {
    $new_authrs_txt = ' (' . implode(', ', $db_res->new_authors) . ')'; 
  }
  else {
    $new_authrs_txt = '';
  }
  if (count($db_res->existing_authors) !== 0) {
    $existing_authrs_txt = ' (' . implode(', ', $db_res->existing_authors) . ')'; 
  }
  else {
    $existing_authrs_txt = '';
  }

  drupal_set_message(
    t('Recognized references: :refs',
      array(
        ':refs' => print_r($obj->citations, true),
      )
    )
  );
  pdfparser_change_paper_upload_form_content_with_js($obj);
}

function _save_file($file_name, $xml, $type) {
  if (strlen($xml) === 0) {
    return;
  }
  $parsed_path = variable_get('pdfparser_parsed_pdf_path');
  
  if (is_dir($parsed_path)) {
    $f = fopen($parsed_path . $file_name . '.' . $type, 'w');
    if ($f === FALSE) {
      drupal_set_message(t('Failed to save the result file. The permission on the folder to save to is: :perm. Please check the folder and change the permission in order to save the result files.',
        array(':perm' => substr(sprintf('%o', fileperms($parsed_path)), -4))), 'error');
    }
    else {
      fwrite($f, $xml);
      fclose($f);
    }
  }
  else {
    drupal_set_message(t('The directory :dir does not exists. Please create it in order to save the result files.',
        array(':dir' => $parsed_path)), 'error');
  }
}

/**
 * This function (or a function like this) should handle the parser result.
 * @param type $obj 
 */
function pdfparser_change_paper_upload_form_content_with_js($obj) {
  drupal_add_js(
    array(
      'pdfparser' => array(
        'title' => $obj->title,
        'abstr' => $obj->abstract,
        'authors' => implode(", ", $obj->authors),
      )
    ), 'setting');
}

function pdfparser_push_to_db($obj, $xml_name, $pdf_filesize) {
  global $user;

  $result = new stdClass();
  $result->new_author_num = 0;
  $result->existing_author_num = 0;
  $result->new_authors = array();
  $result->existing_authors = array();

  $cnt = db_query("SELECT count(id) FROM {pdfparser_journal} WHERE pdf_length = :len AND title = :tit;",
    array(':len' => $pdf_filesize, ':tit' => $obj->title))->fetchField();
  $cnt = (int)$cnt;

  if ($cnt === 0) {
    $now = date("Y-m-d H:i:s", time());
    //$author_ids = pdfarser_make_author_insertations($obj, $now, $user->uid, $result);
    $jid = db_insert('pdfparser_journal')
      ->fields(array(
        'pdf_name' => $xml_name,
        'upload_date' => $now,
        'owner' => $user->uid,
        'title' => $obj->title,
        'pdf_length' => $pdf_filesize,
      ))
      ->execute();
    foreach ($obj->citations as $cit) {
      if (isset($cit->authors)) {
        foreach ($cit->authors as $auth) {
          $cnt = db_query("SELECT count(id) FROM {pdfparser_authors} WHERE name = :name;",
            array(':name' => $auth))
            ->fetchField();
          $cnt = (int)$cnt;
          // adding author because not exists
          if ($cnt === 0) {
            $result->new_author_num++;
            $result->new_authors[] = $auth;
            $aid = db_insert('pdfparser_authors')
              ->fields(array(
                'name' => $auth,
                'insert_date' => $now,
                'inserter' => $user->uid,
              ))
              ->execute();
          }
          // author already exists
          else {
            $result->existing_author_num++;
            $result->existing_authors[] = $auth;
          }
        }
      }
    }
  }
  else {
    drupal_set_message(
      t('The uploaded paper probably already exists. (A file with the same title (:title) and same size (:size kB) exists.)', array(':title' => $obj->title, ':size' => number_format($pdf_filesize / 1024, 1, ',', ' '))),
      'warning');
  }
  return $result;
}

//function pdfparser_make_author_insertations($parsed_xml, $now, $user_id, &$result) {
//  $authors = array();
//  foreach ($obj->citations as $cit) {
//    if (isset($cit->authors)) {
//      foreach ($cit->authors as $auth) {
//        if (!array_key_exists($auth, $authors)) {
//          $authors[$auth] = 0;
//        }
//      }
//    }
//  }
//  foreach ($authors as $name => $id) {
//    $name_id = 0;
//    $result = db_query("SELECT id FROM {pdfparser_authors} WHERE name = :name;",
//      array(':name' => $name))
//      ->fetchField();
//    dvm($result);
//    $name_id = (int)$result;
//    // adding author because not exists
//    if ($cnt === 0) {
//      $result->new_author_num++;
//      $result->new_authors[] = $name;
//      $aid = db_insert('pdfparser_authors')
//        ->fields(array(
//          'name' => $name,
//          'insert_date' => $now,
//          'inserter' => $user_id,
//        ))
//        ->execute();
//    }
//    // author already exists
//    else {
//      $result->existing_author_num++;
//      $result->existing_authors[] = $auth;
//      $authors[$name] = 
//    }
//  }
//
//  return $authors;
//}

function pdfparser_xml_to_array($xml, &$obj, &$tags_to_collect, $level, $citation, &$citation_num) {
  $node_name = $xml->getName();

  if ($node_name == 'citationList') {
    $citation = TRUE;
  }
  
  if ($citation) {
    if ($node_name == 'citation') {
      $citation_num++;
    }
  }
  if (in_array($node_name, $tags_to_collect)) {
    if ($citation === FALSE) {
      if ($node_name == 'title') {
        $obj->title = (string)$xml;
      }
      elseif ($node_name == 'author') {
        $obj->authors[] = (string)$xml;
      }
      elseif ($node_name == 'abstract') {
        if ($obj->abstract === FALSE || strlen((string)$xml) > $obj->abstract) {
          $obj->abstract = (string)$xml;
        }
      }
    }
    else {
      if (!isset($obj->citations[$citation_num]) && ($node_name == 'author' || $node_name == 'title')) {
        $obj->citations[$citation_num] = new stdClass();
        //$obj->citations[$citation_num]->authors = array();
        //$obj->citations[$citation_num]->title = FALSE;
      }
      if ($node_name == 'author') {
        $obj->citations[$citation_num]->authors[] = (string)$xml;
      }
      elseif ($node_name == 'title') {
        $obj->citations[$citation_num]->title = (string)$xml;
      }
    }
  }
  
  foreach ($xml->children() as $ch_name => $ch_node) {
    pdfparser_xml_to_array($ch_node, $obj, $tags_to_collect, $level + 1, $citation, $citation_num);
  }
}

function pdfparser_print_xml_structure($xml, &$obj, &$tags_to_collect, $level, $citation, &$citation_num) {
  $ind = '';
  $cont = '';
  for ($i = 0; $i < $level; $i++) {
    $ind .= '&nbsp;&nbsp;';
  }
  $node_name = $xml->getName();

  if ($node_name == 'citationList') {
    $citation = TRUE;
  }
  
  $cont .= $ind . $node_name;
  if ($citation) {
    $cont .= ' (cit) ';
    if ($node_name == 'citation') {
      $citation_num++;
    }
  }
  if (in_array($node_name, $tags_to_collect)) {
    $cont .= ' (' . (string)$xml . ')';
    if ($citation === FALSE) {
      if ($node_name == 'title') {
        $obj->title = (string)$xml;
      }
      elseif ($node_name == 'author') {
        $obj->authors[] = (string)$xml;
      }
    }
    else {
      if ($node_name == 'author') {
        //if (!isset($obj->citations[$citation_num]->authors)) {
        $obj->citations[$citation_num]->authors[] = (string)$xml;
        //}
      }
      elseif ($node_name == 'title') {
        $obj->citations[$citation_num]->title = (string)$xml;
      }
    }
  }
  $cont .= '<br/>';
  
  
  foreach ($xml->children() as $ch_name => $ch_node) {
    $cont .= pdfparser_print_xml_structure($ch_node, $obj, $tags_to_collect, $level + 1, $citation, $citation_num);
  }
  if ($level == 0) {
    dvm($cont);
    dvm($obj);
  } else {
    return $cont;
  }
}

function do_post_request($url, $json, $filename, $filepath) {
  $data = "";
  $boundary = drupal_substr(md5(rand(0, 32000)), 0, 10);
  // POSTing JSON data
  $data .= '--' . $boundary . "\n";
  $data .= 'Content-Disposition: form-data; name="json"' . "\n";
  $data .= 'Content-type: application/json' . "\n\n";
  $data .= $json . "\n";

  // POSTing the pdf data
  $data .= "--$boundary\n";
  $file_contents = file_get_contents($filepath);
  $data .= "Content-Disposition: form-data; name=\"{$filename}\"; filename=\"{$filename}\"\n";
  $data .= "Content-Type: application/pdf\n";
  $data .= "Content-Transfer-Encoding: binary\n\n";
  $data .= $file_contents . "\n";
  $data .= "--$boundary--\n";

  // compiling the post request
  $params = array(
    'http' => array(
      'method' => 'POST',
      'header' => 'Content-Type: multipart/form-data; boundary=' . $boundary,
      'content' => $data
    )
  );
  $ctx = stream_context_create($params);
  $fp = fopen($url, 'rb', FALSE, $ctx);
  if (!$fp) {
    throw new Exception("Problem with $url, $php_errormsg");
  }
  $response = @stream_get_contents($fp);
  if ($response === FALSE) {
    throw new Exception("Problem reading data from $url, $php_errormsg");
  }
  return $response;
}

function post_json($url, $data, $function, $callback) {

  $json = new stdClass();
  $json->data = $data;
  $json->function = $function;
  $params = array(
    'http' => array(
      'method' => 'POST',
      'header' => 'Content-Type: application/json;',
      'content' => json_encode($json),
    )
  );
  $ctx = stream_context_create($params);
  $fp = fopen($url, 'rb', FALSE, $ctx);
  if (!$fp) {
    throw new Exception("Problem with $url, $php_errormsg");
  }
  $response = @stream_get_contents($fp);
  if ($response === FALSE) {
    throw new Exception("Problem reading data from $url, $php_errormsg");
  }
  $callback(json_decode($response));
}

function req_return($data) {
  dvm($data);
}

////////////////////////////////////////////////////

function _ends_with($haystack, $needle) {
  $length = drupal_strlen($needle);
  if ($length == 0) {
    return TRUE;
  }
  $start  = $length * -1; //negative
  return (drupal_substr($haystack, $start) === $needle);
}

function _generate_code($length) {
  $code = "";
  $possible = "0123456789abcdefghijklmnopqrstuvwxyz";
  for ($i = 0; $i < $length; $i++) {
    $code .= drupal_substr($possible, mt_rand(0, drupal_strlen($possible) - 1), 1);
  }
  return $code;
}

function _is_valid_url($url) {
  return preg_match('|^http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i', $url);
}


