<?php

/**
 *
 * @file
 * This module is for uploading a pdf journal then a remote server parses its
 * content. PDF's could be uploaded locally or it is allowed to give an url
 * which links to a pdf.
 *
 */


function pdfparser_menu() {
  $items = array();

  $items['admin/pdfparser'] = array(
    'title' => 'PDF Parser',
    'description' => 'Parser an uploaded pdf',
    'page callback' => 'pdfparser_upload_pdf',
    'access arguments' => array(TRUE),
  );

  $items['admin/pdfparser/upload'] = array(
    'title' => 'Upload',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

function pdfparser_upload_pdf() {
  $form = drupal_get_form('pdfparser_upload_pdf_form');
  return drupal_render($form);
}

function pdfparser_upload_pdf_form() {

  rest_test();

  //drupal_add_js(drupal_get_path('module', 'pdfparser') . '/js/pdfparser.js');

  $form['pdf'] = array(
    '#type' => 'file',
    '#title' => 'Upload PDF from computer',
  );

  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => 'Upload from URL'
  );

  $form['#attributes'] = array(
    'enctype' => 'multipart/form-data',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload pdf'),
  );

  return $form;
}

function pdfparser_upload_pdf_form_validate($form_id, &$form_values) {
  $name = '';
  $url = '';
  $name_ok = FALSE;
  $url_ok = FALSE;

  if (isset($_FILES['files']['name']['pdf'])) {
    $name = drupal_strtolower($_FILES['files']['name']['pdf']);
  }
  if (!empty($form_values['input']['url'])) {
    $url = drupal_strtolower($form_values['input']['url']);
  }

  if (!_ends_with($name, '.pdf')) {
    $name = FALSE;
  }
  else {
    $name_ok = TRUE;
  }
  if (!_ends_with($url, '.pdf')) {
    $url = FALSE;
  }
  else {
    $url_ok = TRUE;
  }

  if ($name_ok === FALSE && $url_ok === FALSE) {
    form_set_error('pdf', t('Please upload a valid pdf file or paste an url which links to a pdf.'));
  }
  elseif ($name_ok === FALSE && $url_ok !== FALSE) {
    if (!_is_valid_url($url)) {
      form_set_error('url', t('Invalid url format.'));
    }
  }
}

function pdfparser_upload_pdf_form_submit($form_id, &$form_values) {
  $path = getcwd() . '/' . variable_get('pdf_path');

  $name = $_FILES['files']['tmp_name']['pdf'];
  $tmp_name = $_FILES['files']['name']['pdf'];
  $url = $form_values['input']['url'];
  $upload = FALSE;
  $download = FALSE;
  $download_error = FALSE;
  $error = FALSE;

  if (_ends_with(drupal_strtolower($tmp_name), '.pdf')) {
    $upload = TRUE;
  }
  elseif (_ends_with(drupal_strtolower($url), '.pdf')) {
    $download = TRUE;
  }

  do {
    $new_f_name = _generate_code(24) . '.pdf';
  } while (is_file($path . '/' . $new_f_name));

  if ($upload || $download) {
    if ($upload) {
      if (is_dir($path)) {
        move_uploaded_file($_FILES['files']['tmp_name']['pdf'], $path . '/' . $new_f_name);
      }
      else {
        drupal_set_message(t('The path %path must exist to save pdf files to.', array('%path' => $path)), 'error');
      }
    }
    else {
      $pdf = @file_get_contents($url);
      if ($pdf === FALSE) {
        $download_error = $error = TRUE;
      }
      else {
        $file = fopen($path . '/' . $new_f_name, 'w');
        fwrite($file, $pdf);
        fclose($file);
      }
    }
    if ($error) {
      if ($download_error) {
        drupal_set_message(t('Unable to download file from url %url, please try again.', array('%url' => $url)), 'error');
      }
      else {
        drupal_set_message(t('Unknown error.'), 'error');
      }
    }
    else {
      $ret = test_post3('http://devoidmind.com/_dd/drupal/',
        array(),
        array('pdf' => array('name' => $new_f_name, 'path' => $path . '/' . $new_f_name))
      );
      dvm($ret);
      if ($upload) {
        drupal_set_message(t('PDF uploaded successfully.'));
      }
      else {
        drupal_set_message(t('PDF downloaded and stored successfully.'));
      }
    }
  }
  else {
    //TODO: throw error
    dvm('error');
  }
}

function rest_test() {

  $data = RestUtils::processRequest();
  
  dvm($data);

  switch($data->getMethod()) {
    case 'get':
      $user_list = array('a','b','c');
      if ($data->getHttpAccept == 'json') {
        RestUtils::sendResponse(200, json_encode($user_list), 'application/json');
      }
      else if ($data->getHttpAccept == 'xml') {
        $options = array(
          'indent' => '  ',
          'addDecl' => false,
          'rootName' => $fc->getAction(),
          XML_SERIALIZER_OPTION_RETURN_RESULT => true
        );
        $serializer = new XML_Serializer($options);
        RestUtils::sendResponse(200, $serializer->serialize($user_list), 'application/xml');
      }
      break;
    case 'post':
      RestUtils::sendResponse(201, 'ok');
      break;
  }
}


////////////////////////////////////////////////

function test_post3($url, $postdata, $files = array()) {
  $data = "";
  $boundary = "---------------------" . drupal_substr(md5(rand(0, 32000)), 0, 10);

  foreach ($postdata as $key => $val) {
    $data .= "--$boundary\n";
    $data .= "Content-Disposition: form-data; name=\"" . $key . "\"\n\n" . $val . "\n";
  }

  $data .= "--$boundary\n";

  foreach ($files as $key => $file) {
    $fileContents = file_get_contents($file['path']);
    $data .= "Content-Disposition: form-data; name=\"{$key}\"; filename=\"{$file['name']}\"\n";
    $data .= "Content-Type: application/pdf\n";
    $data .= "Content-Transfer-Encoding: binary\n\n";
    $data .= $fileContents . "\n";
    $data .= "--$boundary--\n";
  }
  $params = array('http' => array(
    'method' => 'POST',
    'header' => 'Content-Type: multipart/form-data; boundary=' . $boundary,
    'content' => $data
  ));
  $ctx = stream_context_create($params);
  $fp = fopen($url, 'rb', FALSE, $ctx);
  if (!$fp) {
    throw new Exception("Problem with $url, $php_errormsg");
  }
  $response = @stream_get_contents($fp);
  if ($response === FALSE) {
    throw new Exception("Problem reading data from $url, $php_errormsg");
  }
  return $response;
}

////////////////////////////////////////////////////

function _ends_with($haystack, $needle) {
  $length = drupal_strlen($needle);
  if ($length == 0) {
    return TRUE;
  }
  $start  = $length * -1; //negative
  return (drupal_substr($haystack, $start) === $needle);
}

function _generate_code($length) {
  $code = "";
  $possible = "0123456789abcdefghijklmnopqrstuvwxyz";
  for ($i = 0; $i < $length; $i++) {
    $code .= drupal_substr($possible, mt_rand(0, drupal_strlen($possible) - 1), 1);
  }
  return $code;
}

function _is_valid_url($url) {
  return preg_match('|^http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i', $url);
}

// //////////////////////////////////
// REST CLASSES
// //////////////////////////////////

class RestUtils {

  public static function processRequest() {
    $request_method = strtolower($_SERVER['REQUEST_METHOD']);
    $return_obj = new RestRequest();
    $data = array();

    switch ($request_method) {                                    
      case 'get':
        $data = $_GET;
        break;
      case 'post':
        $data = $_POST;
        break;
      case 'put':
        parse_str(file_get_contents('php://input'), $put_vars);
        $data = $put_vars;
        break;
    }
    $return_obj->setMethod($request_method);
    $return_obj->setRequestVars($data);
    if(isset($data['data'])) {
      $return_obj->setData(json_decode($data['data']));
    }
    return $return_obj;
  }

  public static function sendResponse($status = 200, $body = '', $content_type = 'text/html') {
    $status_header = 'HTTP/1.1 ' . $status . ' ' . RestUtils::getStatusCodeMessage($status);
    header($status_header);
    header('Content-type: ' . $content_type);
    if($body != '') {
      echo $body;
      exit;
    }
    else {
      $message = '';
      switch($status) {
        case 401:
          $message = 'You must be authorized to view this page.';
          break;
        case 404:
          $message = 'The requested URL ' . $_SERVER['REQUEST_URI'] . ' was not found.';
          break;
        case 500:
          $message = 'The server encountered an error processing your request.';
          break;
        case 501:
          $message = 'The requested method is not implemented.';
          break;
      }
      $signature = ($_SERVER['SERVER_SIGNATURE'] == '') ?
        $_SERVER['SERVER_SOFTWARE'] . ' Server at ' . $_SERVER['SERVER_NAME'] . ' Port ' . $_SERVER['SERVER_PORT'] : $_SERVER['SERVER_SIGNATURE'];

      $body = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
                  <html>
                    <head>
                      <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
                      <title>' . $status . ' ' . RestUtils::getStatusCodeMessage($status) . '</title>
                    </head>
                    <body>
                      <h1>' . RestUtils::getStatusCodeMessage($status) . '</h1>
                      <p>' . $message . '</p>
                      <hr />
                      <address>' . $signature . '</address>
                    </body>
                  </html>';
      echo $body;
      exit;
    }
  }

  public static function getStatusCodeMessage($status) {
    $codes = Array(
      100 => 'Continue',
      101 => 'Switching Protocols',
      200 => 'OK',
      201 => 'Created',
      202 => 'Accepted',
      203 => 'Non-Authoritative Information',
      204 => 'No Content',
      205 => 'Reset Content',
      206 => 'Partial Content',
      300 => 'Multiple Choices',
      301 => 'Moved Permanently',
      302 => 'Found',
      303 => 'See Other',
      304 => 'Not Modified',
      305 => 'Use Proxy',
      306 => '(Unused)',
      307 => 'Temporary Redirect',
      400 => 'Bad Request',
      401 => 'Unauthorized',
      402 => 'Payment Required',
      403 => 'Forbidden',
      404 => 'Not Found',
      405 => 'Method Not Allowed',
      406 => 'Not Acceptable',
      407 => 'Proxy Authentication Required',
      408 => 'Request Timeout',
      409 => 'Conflict',
      410 => 'Gone',
      411 => 'Length Required',
      412 => 'Precondition Failed',
      413 => 'Request Entity Too Large',
      414 => 'Request-URI Too Long',
      415 => 'Unsupported Media Type',
      416 => 'Requested Range Not Satisfiable',
      417 => 'Expectation Failed',
      500 => 'Internal Server Error',
      501 => 'Not Implemented',
      502 => 'Bad Gateway',
      503 => 'Service Unavailable',
      504 => 'Gateway Timeout',
      505 => 'HTTP Version Not Supported'
    );
    return (isset($codes[$status])) ? $codes[$status] : '';
  }
}

class RestRequest {
  private $request_vars;
  private $data;
  private $http_accept;
  private $method;

  public function __construct() {
    $this->request_vars = array();
    $this->data = '';
    $this->http_accept = (strpos($_SERVER['HTTP_ACCEPT'], 'json')) ? 'json' : 'xml';
    $this->method = 'get';
  }

  public function setData($data){
    $this->data = $data;
  }

  public function setMethod($method) {
    $this->method = $method;
  }

  public function setRequestVars($request_vars) {
    $this->request_vars = $request_vars;
  }

  public function getData() {
    return $this->data;
  }

  public function getMethod() {
    return $this->method;
  }

  public function getHttpAccept() {
    return $this->http_accept;
  }

  public function getRequestVars() {
    return $this->request_vars;
  }
}

